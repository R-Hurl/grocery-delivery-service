version: "3.4"
services:
  postgres_db:
    image: postgres:latest
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: "testuser"
      POSTGRES_PASSWORD: "password"
      POSTGRES_DB: "grocerydeliveryservicedb"
    volumes:
      - ./seed.sql:/docker-entrypoint-initdb.d/seed.sql
  grocerydeliveryapi:
    image: grocerydeliveryapi:latest
    ports:
      - "5000:80"
    depends_on:
      - "postgres_db"
    build:
      context: grocery-delivery-api
      dockerfile: Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: "Development"
  grocerydeliveryconsumer:
    image: grocerydeliveryconsumer:latest
    build:
      context: grocery-delivery-consumer
      dockerfile: Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: "Development"
  pendingordersgrpc:
    image: pendingordersgrpc:latest
    ports:
      - "50050:50050"
      - "50001:50001"
    depends_on:
      - "postgres_db"
    build:
      context: grocery-delivery-pending-orders-service
      dockerfile: Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: "Development"
  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  broker:
    image: confluentinc/cp-kafka:6.2.0
    container_name: broker
    ports:
      # To learn about configuring Kafka for access across networks see
      # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  init_kafka:
    image: confluentinc/cp-kafka:6.2.0
    depends_on:
      - broker
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server broker:29092 --list

      echo -e 'Creating Kafka Topics'
      kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic orders

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server broker:29092 --list
      "
